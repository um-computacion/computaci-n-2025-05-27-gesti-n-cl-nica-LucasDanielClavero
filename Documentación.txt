Cómo Ejecutar el Sistema
Para poner en marcha el sistema de gestión de la clínica, simplemente necesitas ejecutar el archivo cli.py desde tu terminal. Este archivo contiene la interfaz de línea de comandos que te permitirá interactuar con todas las funcionalidades del programa. Al ejecutar el comando python cli.py, se iniciará la aplicación, cargará un conjunto de datos iniciales de ejemplo y te presentará un menú con opciones numeradas. A partir de ahí, podrás registrar nuevos pacientes y médicos, agendar turnos, emitir recetas y consultar la información almacenada en el sistema.

Cómo Ejecutar las Pruebas
Para asegurar que la lógica principal del sistema funcione correctamente, se ha incluido un archivo de pruebas llamado test_clinica.py. Este archivo contiene una serie de tests automáticos que verifican el comportamiento de las clases y funciones del archivo modelo.py. Para ejecutar estas pruebas, debes correr el archivo desde la terminal con el comando python test_clinica.py. Esto iniciará el gestor de pruebas de Python, que realizará todas las validaciones, como la creación correcta de pacientes, la prevención de turnos duplicados y el manejo de errores esperados. Los resultados te indicarán si todas las partes del núcleo del sistema se comportan como deberían.

Explicación del Diseño General
El sistema está diseñado siguiendo un enfoque que separa claramente las responsabilidades en tres archivos principales. El archivo modelo.py es el corazón de la aplicación; define todas las estructuras de datos y la lógica de negocio. Aquí se encuentran las clases como Paciente, Medico y Turno, así como la clase Clinica, que actúa como el motor central que gestiona todas las operaciones. Este archivo no se encarga de interactuar con el usuario, solo de procesar los datos y aplicar las reglas del sistema.

Por otro lado, el archivo cli.py funciona como la capa de presentación o la vista. Su única responsabilidad es interactuar con el usuario a través de una interfaz de línea de comandos. Se encarga de mostrar el menú, recibir las opciones del usuario y llamar a los métodos correspondientes de la clase Clinica (definida en modelo.py) para ejecutar las acciones solicitadas. Finalmente, el archivo test_clinica.py se dedica exclusivamente a la verificación y control de calidad, asegurando que la lógica definida en modelo.py sea robusta y funcione sin errores. Esta separación hace que el código sea más organizado, fácil de entender y de mantener.